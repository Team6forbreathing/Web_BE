name: Spring Boot CI/CD
 
on:
  push:
    branches:
      - main
      - feat/user-detail
  pull_request:
    branches:
      - main
      - feat/user-detail

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: 코드 체크아웃
      - name: Checkout 코드
        uses: actions/checkout@v3

      # Step 2: JDK 17 설정
      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      # Step 3: Gradle 캐시 설정
      - name: Gradle 캐시
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Step 4: Gradle 빌드
      - name: Gradle 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew clean build --no-daemon

      # Step 5: Docker Hub 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Docker 이미지 빌드 및 푸시
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring_app:latest
          build-args: |
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }}
            REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }}
            MYSQL_URL=${{ secrets.MYSQL_URL }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PW=${{ secrets.MYSQL_PW }}
            INFLUX_URL=${{ secrets.INFLUX_URL }}
            INFLUX_ORG=${{ secrets.INFLUX_ORG }}
            INFLUX_BUCKET=${{ secrets.INFLUX_BUCKET }}
            INFLUX_TOKEN=${{ secrets.INFLUX_TOKEN }}

      # Step 7: 서버에 배포
      - name: 서버 배포
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 기존 컨테이너 중지 및 제거
            docker stop spring_app || true
            docker rm spring_app || true
            # 최신 이미지 풀
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring_app:latest
            # Docker 네트워크 확인 및 생성
            docker network create app-network || true
            # 새 컨테이너 실행
            docker run -d --name spring_app \
              --network app-network \
              -p 88:8080 \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }} \
              -e REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }} \
              -e MYSQL_URL=${{ secrets.MYSQL_URL }} \
              -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
              -e MYSQL_PW=${{ secrets.MYSQL_PW }} \
              -e INFLUX_URL=${{ secrets.INFLUX_URL }} \
              -e INFLUX_ORG=${{ secrets.INFLUX_ORG }} \
              -e INFLUX_BUCKET=${{ secrets.INFLUX_BUCKET }} \
              -e INFLUX_TOKEN=${{ secrets.INFLUX_TOKEN }} \
              ${{ secrets.DOCKER_USERNAME }}/spring_app:latest
